import { connect } from 'amqplib';
import { AmqpConnectionService } from '../../../libs/services/amqp/amqp-connection.service';
import { CveService } from './app/services/cve.service';
import { NodePackage } from '../../../libs/shared/Types/NodePackage';
import axios from 'axios';
import { NodePackageExtended } from '../../../libs/shared/Types/NodePackageExtended';

const connectionString = AmqpConnectionService.getConnectionString();
connect(connectionString)
  .then(function (conn) {
    process.once('SIGINT', function () {
      conn.close();
    });
    return conn.createChannel().then(function (ch) {
      let ok = ch.assertQueue('meana_packages', { durable: false });

      ok = ok.then(function (_qok) {
        const cveService = new CveService();
        return ch.consume(
          'meana_packages',
          function (msg) {
            const nodePackages: {
              nodeUuid: string;
              packages: NodePackageExtended[];
            } = JSON.parse(msg.content.toString());
            const responses = nodePackages.packages.map((nodePackage) => ({
              packageName: nodePackage.packageName,
              packageVersion: nodePackage.packageVersion,
              cve: cveService.hasPackageVulnerability(nodePackage),
              upgradable: nodePackage.upgradable,
            }));

            Promise.all(responses).then(function (packages) {
              axios
                .post(
                  `http://meana_api:3333/api/node-packages/set-latest/${nodePackages.nodeUuid}`,
                  {
                    packages: packages,
                  }
                )
                .catch();
            });
          },
          { noAck: true }
        );
      });

      return ok;
    });
  })
  .catch(console.warn);
